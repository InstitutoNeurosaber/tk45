/**
 * Script para remover BOM (Byte Order Mark) dos arquivos TypeScript
 * O BOM √© o caractere \xFF\xFE que causa erros de compila√ß√£o
 */

const fs = require('fs');
const path = require('path');

// Diret√≥rio de fun√ß√µes do Netlify
const functionsDir = path.join(__dirname, '..', 'netlify', 'functions');

console.log('üßπ Iniciando limpeza de BOM em arquivos TypeScript...');

// Verificar se o diret√≥rio existe
if (!fs.existsSync(functionsDir)) {
  console.log(`‚ùå Diret√≥rio ${functionsDir} n√£o encontrado`);
  process.exit(0);
}

// Listar arquivos TypeScript
const tsFiles = fs.readdirSync(functionsDir)
  .filter(file => file.endsWith('.ts'));

if (tsFiles.length === 0) {
  console.log('‚úÖ Nenhum arquivo TypeScript encontrado');
  process.exit(0);
}

console.log(`üîç Encontrados ${tsFiles.length} arquivos TypeScript para verificar`);

// Processar cada arquivo
for (const file of tsFiles) {
  const filePath = path.join(functionsDir, file);
  console.log(`üìÑ Verificando ${file}...`);
  
  try {
    // Ler o arquivo como buffer para detectar BOM
    const buffer = fs.readFileSync(filePath);
    
    // Verificar se o arquivo come√ßa com BOM
    const hasBOM = buffer.length >= 3 && 
                  buffer[0] === 0xEF && 
                  buffer[1] === 0xBB && 
                  buffer[2] === 0xBF;
    
    if (hasBOM) {
      console.log(`üî¥ BOM detectado em ${file}, removendo...`);
      
      // Remover BOM (primeiros 3 bytes) e escrever o arquivo novamente
      const cleanBuffer = buffer.slice(3);
      fs.writeFileSync(filePath, cleanBuffer);
      
      console.log(`‚úÖ BOM removido de ${file}`);
    } else {
      const hasInvisibleChars = buffer.length > 0 && 
                               (buffer[0] === 0xFF || 
                                buffer[0] === 0xFE || 
                                buffer[0] > 127);
      
      if (hasInvisibleChars) {
        console.log(`üî¥ Caracteres invis√≠veis detectados em ${file}, removendo...`);
        
        // Converte o buffer para string, removendo caracteres inv√°lidos
        let content = buffer.toString('utf8');
        content = content.replace(/^\uFEFF/, ''); // Remove BOM Unicode
        
        // Escrever arquivo limpo
        fs.writeFileSync(filePath, content, 'utf8');
        
        console.log(`‚úÖ Caracteres invis√≠veis removidos de ${file}`);
      } else {
        console.log(`‚úÖ ${file} n√£o cont√©m BOM ou caracteres invis√≠veis`);
      }
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao processar ${file}: ${error.message}`);
  }
}

console.log('üéâ Processo de limpeza conclu√≠do!'); 